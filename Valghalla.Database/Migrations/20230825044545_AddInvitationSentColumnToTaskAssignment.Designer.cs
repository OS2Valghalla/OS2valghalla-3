// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Valghalla.Database;

#nullable disable

namespace Valghalla.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230825044545_AddInvitationSentColumnToTaskAssignment")]
    partial class AddInvitationSentColumnToTaskAssignment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RelatedList", b =>
                {
                    b.Property<int>("PrimaryListTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedListTypeId")
                        .HasColumnType("integer");

                    b.HasKey("PrimaryListTypeId", "RelatedListTypeId");

                    b.HasIndex(new[] { "PrimaryListTypeId" }, "IX_FK_RelatedList_ListTypePrimary");

                    b.HasIndex(new[] { "RelatedListTypeId" }, "IX_FK_RelatedList_ListTypeRelated");

                    b.ToTable("RelatedList", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ColumnEntity", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int>("DatatypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsFilterable")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSortable")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsViewable")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<int?>("ListPickerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("ListTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("LookupColumnId")
                        .HasColumnType("integer");

                    b.Property<string>("LookupFunction")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int>("Ordinal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("RelatedListId")
                        .HasColumnType("integer");

                    b.HasKey("ColumnId")
                        .HasName("PK__Column__1AA1420EE98F6ED2");

                    b.HasIndex("DatatypeId");

                    b.HasIndex("ListPickerTypeId");

                    b.HasIndex("ListTypeId");

                    b.ToTable("Column", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ColumnOperatorEntity", b =>
                {
                    b.Property<int>("ColumnOperatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ColumnOperatorId"));

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.HasKey("ColumnOperatorId")
                        .HasName("PK__ColumnOp__FAE0D17E395F8D83");

                    b.HasIndex("OperatorId");

                    b.HasIndex(new[] { "ColumnId" }, "ColumnOperator_cl");

                    b.ToTable("ColumnOperator", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.DatatypeEntity", b =>
                {
                    b.Property<int>("DatatypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("DatatypeId")
                        .HasName("PK__Datatype__2B1CF62988885FAB");

                    b.ToTable("Datatype", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.FilterColumnEntity", b =>
                {
                    b.Property<int>("FilterColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilterColumnId"));

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("ColumnOperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("FilterId")
                        .HasColumnType("integer");

                    b.HasKey("FilterColumnId")
                        .HasName("PK__FilterCo__045F2EEA787BE718");

                    b.HasIndex("ColumnId");

                    b.HasIndex("ColumnOperatorId");

                    b.HasIndex(new[] { "FilterId", "ColumnId" }, "FilterColumn_cl");

                    b.ToTable("FilterColumn", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.FilterColumnValueEntity", b =>
                {
                    b.Property<int>("FilterColumnValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilterColumnValueId"));

                    b.Property<int>("FilterColumnId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ValueKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("FilterColumnValueId")
                        .HasName("PK__FilterCo__E13F66683C673460");

                    b.HasIndex(new[] { "FilterColumnId" }, "FilterColumnValue_cl");

                    b.ToTable("FilterColumnValue", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.FilterEntity", b =>
                {
                    b.Property<int>("FilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FilterId"));

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<int>("QueryId")
                        .HasColumnType("integer");

                    b.HasKey("FilterId")
                        .HasName("PK__Filter__3159DF6FCEECCF18");

                    b.HasIndex(new[] { "QueryId", "Ordinal" }, "Filter_cl")
                        .IsUnique();

                    b.ToTable("Filter", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ListPickerTypeEntity", b =>
                {
                    b.Property<int>("ListPickerTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("ListPickerTypeId")
                        .HasName("PK__ListPickerTypeId");

                    b.ToTable("ListPickerType", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ListTypeColumnEntity", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("ListTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<int>("RelatedListTypeId")
                        .HasColumnType("integer");

                    b.HasKey("ColumnId", "ListTypeId");

                    b.HasIndex("ListTypeId");

                    b.ToTable("ListTypeColumn", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ListTypeEntity", b =>
                {
                    b.Property<int>("ListTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Table")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("ListTypeId")
                        .HasName("PK__ListType__5268C8CA6FE7C67D");

                    b.ToTable("ListType", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.OperatorEntity", b =>
                {
                    b.Property<int>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("OperatorId")
                        .HasName("PK__Operator__7BB12FAEDC1BDEAE");

                    b.ToTable("Operator", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.QueryEntity", b =>
                {
                    b.Property<int>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QueryId"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<int>("ListTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("QueryId")
                        .HasName("PK__Query__5967F7DAAA5A5FF1");

                    b.ToTable("Query", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ResultColumnEntity", b =>
                {
                    b.Property<int>("ResultColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResultColumnId"));

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<int>("QueryId")
                        .HasColumnType("integer");

                    b.HasKey("ResultColumnId")
                        .HasName("PK__ResultCo__AE924C90960785A6");

                    b.HasIndex("ColumnId");

                    b.HasIndex("QueryId");

                    b.ToTable("ResultColumn", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.SortColumnEntity", b =>
                {
                    b.Property<int>("SortColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SortColumnId"));

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDecending")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<int>("QueryId")
                        .HasColumnType("integer");

                    b.HasKey("SortColumnId")
                        .HasName("PK__SortColu__68B46505E7F3C892");

                    b.HasIndex("ColumnId");

                    b.HasIndex("QueryId");

                    b.ToTable("SortColumn", "Analyze");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.AreaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.AuditLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("EventTable")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Pk2name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("Pk2value")
                        .HasColumnType("uuid");

                    b.Property<string>("Pk3name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("Pk3value")
                        .HasColumnType("uuid");

                    b.Property<string>("Pk4name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("Pk4value")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK__AuditLog__3214EC07EF5A33E9");

                    b.HasIndex("ChangedBy");

                    b.HasIndex(new[] { "ElectionId", "Pk2value", "Pk3value", "Pk4value" }, "IX_AuditLog_Clustered");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.CommunicationLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<int>("SendType")
                        .HasColumnType("integer");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParticipantId");

                    b.ToTable("CommunicationLog", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsDefaultTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("CommunicationTemplate", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.CommunicationTemplateFileEntity", b =>
                {
                    b.Property<Guid>("CommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileReferenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("CommunicationTemplateId", "FileReferenceId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FileReferenceId");

                    b.ToTable("CommunicationTemplateFile", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ConfigurationEntity", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Key");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionCommitteeContactInformationEntity", b =>
                {
                    b.Property<string>("PageName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DigitalPost")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ElectionResponsibleApartment")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("LogoFileReferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("PageName");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LogoFileReferenceId");

                    b.ToTable("ElectionCommitteeContactInformation", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfirmationOfCancellationCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfirmationOfRegistrationCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ElectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ElectionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ElectionStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ElectionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvitationCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvitationReminderCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<int>("LockPeriod")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RetractedInvitationCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskReminderCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("ConfirmationOfCancellationCommunicationTemplateId");

                    b.HasIndex("ConfirmationOfRegistrationCommunicationTemplateId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ElectionTypeId");

                    b.HasIndex("InvitationCommunicationTemplateId");

                    b.HasIndex("InvitationReminderCommunicationTemplateId");

                    b.HasIndex("RetractedInvitationCommunicationTemplateId");

                    b.HasIndex("TaskReminderCommunicationTemplateId");

                    b.ToTable("Election", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionTaskTypeCommunicationTemplateEntity", b =>
                {
                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfirmationOfCancellationCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfirmationOfRegistrationCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvitationCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvitationReminderCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RetractedInvitationCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaskReminderCommunicationTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("ElectionId", "TaskTypeId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("ConfirmationOfCancellationCommunicationTemplateId");

                    b.HasIndex("ConfirmationOfRegistrationCommunicationTemplateId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InvitationCommunicationTemplateId");

                    b.HasIndex("InvitationReminderCommunicationTemplateId");

                    b.HasIndex("RetractedInvitationCommunicationTemplateId");

                    b.HasIndex("TaskReminderCommunicationTemplateId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("ElectionTaskTypeCommunicationTemplates", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("ElectionType", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionTypeValidationRuleEntity", b =>
                {
                    b.Property<Guid>("ElectionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValidationRuleId")
                        .HasColumnType("uuid");

                    b.HasKey("ElectionTypeId", "ValidationRuleId");

                    b.HasIndex("ValidationRuleId");

                    b.ToTable("ElectionTypeValidationRule", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionValidationRuleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.ToTable("ElectionValidationRule", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionWorkLocationEntity", b =>
                {
                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkLocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("ElectionId", "WorkLocationId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("WorkLocationId");

                    b.ToTable("ElectionWorkLocation", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.FileReferenceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("FileReference", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.JobEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ParticipantEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CoAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CountryName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Cpr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deceased")
                        .HasColumnType("boolean");

                    b.Property<bool>("Disenfranchised")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<bool>("ExemptDigitalPost")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("LastValidationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("MunicipalityCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("MunicipalityName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Participant", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ParticipantEventLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ParticipantEventLog", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.PrintTemplateMappingEntity", b =>
                {
                    b.Property<string>("Entity_EntityName")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Entity_EntityPropertyName")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Template_FieldName")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Template_TableName")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Entity_EntityName", "Entity_EntityPropertyName");

                    b.ToTable("PrintTemplateMappings");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.RejectedTaskAssignmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ElectionId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WorkLocationId");

                    b.ToTable("RejectedTaskAssignment", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.SpecialDietEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("SpecialDiet", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.SpecialDietParticipantEntity", b =>
                {
                    b.Property<Guid>("SpecialDietId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("SpecialDietId", "ParticipantId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParticipantId");

                    b.ToTable("SpecialDietParticipant", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskAssignmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("HashValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("InvitationCode")
                        .HasColumnType("uuid");

                    b.Property<bool>("InvitationSent")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Responsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id", "ElectionId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ElectionId");

                    b.HasIndex("HashValue");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WorkLocationId", "TaskTypeId");

                    b.HasIndex("WorkLocationId", "TeamId");

                    b.ToTable("TaskAssignment", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskLinkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("HashValue")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id", "ElectionId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("HashValue");

                    b.ToTable("TaskLink", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<int?>("Payment")
                        .HasColumnType("integer");

                    b.Property<bool>("SendingReminderEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<bool>("Trusted")
                        .HasColumnType("boolean");

                    b.Property<bool>("ValidationNotRequired")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("TaskType", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskTypeFileEntity", b =>
                {
                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileReferenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("TaskTypeId", "FileReferenceId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FileReferenceId");

                    b.ToTable("TaskTypeFile", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TasksFilteredLinkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("HashValue")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id", "ElectionId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("HashValue");

                    b.ToTable("TasksFilteredLink", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TeamLinkEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashValue")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("HashValue");

                    b.ToTable("TeamLink", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TeamMemberEntity", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("TeamId", "ParticipantId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParticipantId");

                    b.ToTable("TeamMember", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TeamResponsibleEntity", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("TeamId", "ParticipantId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParticipantId");

                    b.ToTable("TeamResponsible", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cpr")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Cvr")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Serial")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WebPageEntity", b =>
                {
                    b.Property<string>("PageName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("PageInfo")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("PageName");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("WebPages", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("WorkLocation", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationResponsibleEntity", b =>
                {
                    b.Property<Guid>("WorkLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("WorkLocationId", "ParticipantId");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParticipantId");

                    b.ToTable("WorkLocationResponsible", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationTaskTypeEntity", b =>
                {
                    b.Property<Guid>("WorkLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkLocationId", "TaskTypeId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("WorkLocationTaskTypes", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationTeamEntity", b =>
                {
                    b.Property<Guid>("WorkLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkLocationId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("WorkLocationTeams", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.ApplicationView", b =>
                {
                    b.Property<DateTime?>("ApplicationOfInterestCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Bid")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("FieldDataData")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("FieldDataId")
                        .HasColumnType("uuid");

                    b.Property<int?>("FieldDataIndex")
                        .HasColumnType("integer");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("FieldType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("FormFieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FormId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime>("FormPostCreated")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FormPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormPostMotivation")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("FormPostStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("FormType")
                        .HasColumnType("integer");

                    b.Property<string>("PersonAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("PersonAge")
                        .HasColumnType("integer");

                    b.Property<string>("PersonCar")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonCo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonGender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonSocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonTag")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("PersonTypeId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RowIndex")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("ApplicationView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.AssignmentView", b =>
                {
                    b.Property<string>("Accepted")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("AssignementFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("AssignementPublicFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ElectoralDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectoralDistrictName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("Expense")
                        .HasColumnType("double precision");

                    b.Property<int?>("Fee")
                        .HasColumnType("integer");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("MileCompensation")
                        .HasColumnType("double precision");

                    b.Property<string>("ParishName")
                        .HasMaxLength(103)
                        .HasColumnType("character varying(103)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.ToTable((string)null);

                    b.ToView("AssignmentView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.BuildingView", b =>
                {
                    b.Property<string>("Accepted")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("ApplicationOfInterestCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("AssignmentFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("AssignmentPublicFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingCanExpand")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingComment")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDistrict")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("BuildingDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingInfoToContactPerson")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingInformerNeeded")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("BuildingTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingVisitingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingWebpage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectoralDistrictName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ElectoralDistrictNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("Expense")
                        .HasColumnType("double precision");

                    b.Property<string>("Expr1")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("Expr2")
                        .HasMaxLength(103)
                        .HasColumnType("character varying(103)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("Fee")
                        .HasColumnType("integer");

                    b.Property<string>("FeeType")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("MileCompensation")
                        .HasColumnType("double precision");

                    b.Property<string>("ParishName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ParishNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("PersonAge")
                        .HasColumnType("integer");

                    b.Property<string>("PersonCar")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonCo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonGender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonGenderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonSocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonTag")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("PersonTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.ToTable((string)null);

                    b.ToView("BuildingView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.CourseOccassionView", b =>
                {
                    b.Property<string>("Accepted")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("ApplicationOfInterestCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("AssignmentFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("AssignmentPublicFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CourseOccassionAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CourseOccassionCourseDescription")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CourseOccassionCourseInfo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("CourseOccassionCourseResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CourseOccassionDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("CourseOccassionEndTime")
                        .HasPrecision(0)
                        .HasColumnType("interval(0)");

                    b.Property<string>("CourseOccassionHall")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("CourseOccassionId")
                        .HasColumnType("uuid");

                    b.Property<string>("CourseOccassionRoom")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<TimeSpan>("CourseOccassionStartTime")
                        .HasPrecision(0)
                        .HasColumnType("interval(0)");

                    b.Property<Guid?>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectoralDistrictName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("Expense")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Expr1")
                        .HasColumnType("uuid");

                    b.Property<int?>("Fee")
                        .HasColumnType("integer");

                    b.Property<string>("FeeType")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("MileCompensation")
                        .HasColumnType("double precision");

                    b.Property<string>("ParishName")
                        .HasMaxLength(103)
                        .HasColumnType("character varying(103)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("PersonAge")
                        .HasColumnType("integer");

                    b.Property<string>("PersonCar")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonCo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonGender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonSocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonTag")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("TeacherAge")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherGender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherGenderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherSocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("TeacherType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("TeacherTypeId")
                        .HasColumnType("uuid");

                    b.ToTable((string)null);

                    b.ToView("CourseOccassionView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.ElectionView", b =>
                {
                    b.Property<string>("BuildingDistrict")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("BuildingDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("BuildingTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingVisitingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("ElectionDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectionName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("ElectoralDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectoralDistrictNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("GruppNamn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ParishName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ParishNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonSocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonTyp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("RoomName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.ToTable((string)null);

                    b.ToView("ElectionView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.ElectoralDistrictView", b =>
                {
                    b.Property<string>("Accepted")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("ApplicationOfInterestCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("AssignmentFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("AssignmentPublicFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingCanExpand")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingComment")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDistrict")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("BuildingDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingInfoToContactPerson")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingInformerNeeded")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("BuildingTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingVisitingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingWebpage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectoralDistrictName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ElectoralDistrictNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("Expense")
                        .HasColumnType("double precision");

                    b.Property<int?>("Fee")
                        .HasColumnType("integer");

                    b.Property<string>("FeeType")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("MileCompensation")
                        .HasColumnType("double precision");

                    b.Property<string>("ParishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ParishNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("PersonAge")
                        .HasColumnType("integer");

                    b.Property<string>("PersonCar")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonCo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonGender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonSocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonTag")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("RoomName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.ToTable((string)null);

                    b.ToView("ElectoralDistrictView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.GroupView", b =>
                {
                    b.Property<string>("Accepted")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("ApplicationOfInterestCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("AssignmentFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("AssignmentPublicFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingCanExpand")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingComment")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryAddress")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryPostalCode")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryPostalPlace")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDistrict")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingEmail")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingInfoToContactPerson")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingInformerNeeded")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingName")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingPhoneNumber")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatus")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatusId")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingType")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("BuildingTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingVisitingAddress")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalCode")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalPlace")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingWebpage")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyNumber")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectoralDistrictName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ElectoralDistrictNumber")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("Expense")
                        .HasColumnType("double precision");

                    b.Property<string>("Expr1")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("Fee")
                        .HasColumnType("integer");

                    b.Property<string>("FeeType")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("GroupCategory")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("GroupDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("MileCompensation")
                        .HasColumnType("double precision");

                    b.Property<string>("ParishName")
                        .HasMaxLength(103)
                        .HasColumnType("character varying(103)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ParishNumber")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("PersonAge")
                        .HasColumnType("integer");

                    b.Property<string>("PersonCar")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonCo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonGender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonSocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonTag")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("RoomElectoralDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.ToTable((string)null);

                    b.ToView("GroupView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.PersonView", b =>
                {
                    b.Property<string>("Accepted")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<DateTime?>("ApplicationOfInterestCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("AssignmentFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("AssignmentPublicFunction")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CourseOccassionAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CourseOccassionCourseDescription")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CourseOccassionCourseInfo")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("CourseOccassionCourseResponsibleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CourseOccassionDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("CourseOccassionEndTime")
                        .HasPrecision(0)
                        .HasColumnType("interval(0)");

                    b.Property<string>("CourseOccassionHall")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("CourseOccassionRoom")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<TimeSpan?>("CourseOccassionStartTime")
                        .HasPrecision(0)
                        .HasColumnType("interval(0)");

                    b.Property<Guid>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectoralDistrictName")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<double?>("Expense")
                        .HasColumnType("double precision");

                    b.Property<int?>("Fee")
                        .HasColumnType("integer");

                    b.Property<string>("FeeType")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<double?>("MileCompensation")
                        .HasColumnType("double precision");

                    b.Property<string>("ParishName")
                        .HasMaxLength(103)
                        .HasColumnType("character varying(103)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<int?>("PersonAge")
                        .HasColumnType("integer");

                    b.Property<string>("PersonCar")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonCo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonGender")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonGenderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonSocialSecurityNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonTag")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("PersonTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Temp")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .UseCollation("da-DK-x-icu");

                    b.ToTable((string)null);

                    b.ToView("PersonView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.RoomView", b =>
                {
                    b.Property<string>("BuildingCanExpand")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingComment")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDeliveryPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingDistrict")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("BuildingDistrictId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingInfoToContactPerson")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingInformerNeeded")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("BuildingTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingVisitingAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingVisitingPostalPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("BuildingWebpage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ConstituencyNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ElectoralDistrictNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParishName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("ParishNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("RoomElectoralDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.ToTable((string)null);

                    b.ToView("RoomView", (string)null);
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Views.StaffingView", b =>
                {
                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("ElectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ElectoralDistrictId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonCo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonFreeText")
                        .HasColumnType("text")
                        .UseCollation("da-DK-x-icu");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("PersonLastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonMobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostPlace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonPostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonSocialSecurityNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatus")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character varying(36)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PersonType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.Property<string>("PublicDescription")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("da-DK-x-icu");

                    b.ToTable((string)null);

                    b.ToView("StaffingView", (string)null);
                });

            modelBuilder.Entity("RelatedList", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.ListTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("PrimaryListTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RelatedList_ListTypePrimary");

                    b.HasOne("Valghalla.Database.Entities.Analyze.ListTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("RelatedListTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_RelatedList_ListTypeRelated");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ColumnEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.DatatypeEntity", "Datatype")
                        .WithMany("Columns")
                        .HasForeignKey("DatatypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Column_Datatype");

                    b.HasOne("Valghalla.Database.Entities.Analyze.ListPickerTypeEntity", "ListPickerType")
                        .WithMany("Columns")
                        .HasForeignKey("ListPickerTypeId")
                        .HasConstraintName("FK_Column_ListPickerType");

                    b.HasOne("Valghalla.Database.Entities.Analyze.ListTypeEntity", "ListType")
                        .WithMany("Columns")
                        .HasForeignKey("ListTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Column_ListType");

                    b.Navigation("Datatype");

                    b.Navigation("ListPickerType");

                    b.Navigation("ListType");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ColumnOperatorEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.ColumnEntity", "Column")
                        .WithMany("ColumnOperators")
                        .HasForeignKey("ColumnId")
                        .IsRequired()
                        .HasConstraintName("FK_ColumnOperator_Column");

                    b.HasOne("Valghalla.Database.Entities.Analyze.OperatorEntity", "Operator")
                        .WithMany("ColumnOperators")
                        .HasForeignKey("OperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__ColumnOpe__Opera__37703C52");

                    b.Navigation("Column");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.FilterColumnEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.ColumnEntity", "Column")
                        .WithMany("FilterColumns")
                        .HasForeignKey("ColumnId")
                        .IsRequired()
                        .HasConstraintName("FK_FilterColumn_Column");

                    b.HasOne("Valghalla.Database.Entities.Analyze.ColumnOperatorEntity", "ColumnOperator")
                        .WithMany("FilterColumns")
                        .HasForeignKey("ColumnOperatorId")
                        .IsRequired()
                        .HasConstraintName("FK__FilterCol__Colum__3A4CA8FD");

                    b.HasOne("Valghalla.Database.Entities.Analyze.FilterEntity", "Filter")
                        .WithMany("FilterColumns")
                        .HasForeignKey("FilterId")
                        .IsRequired()
                        .HasConstraintName("FK__FilterCol__Filte__3B40CD36");

                    b.Navigation("Column");

                    b.Navigation("ColumnOperator");

                    b.Navigation("Filter");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.FilterColumnValueEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.FilterColumnEntity", "FilterColumn")
                        .WithMany("FilterColumnValues")
                        .HasForeignKey("FilterColumnId")
                        .IsRequired()
                        .HasConstraintName("FK__FilterCol__Filte__3D2915A8");

                    b.Navigation("FilterColumn");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.FilterEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.QueryEntity", "Query")
                        .WithMany("Filters")
                        .HasForeignKey("QueryId")
                        .IsRequired()
                        .HasConstraintName("FK__Filter__QueryId__395884C4");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ListTypeColumnEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.ColumnEntity", "Column")
                        .WithMany("ListTypeColumns")
                        .HasForeignKey("ColumnId")
                        .IsRequired()
                        .HasConstraintName("FK_ListTypeColumn_Column");

                    b.HasOne("Valghalla.Database.Entities.Analyze.ListTypeEntity", "ListType")
                        .WithMany("ListTypeColumns")
                        .HasForeignKey("ListTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ListTypeColumn_ListType");

                    b.Navigation("Column");

                    b.Navigation("ListType");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ResultColumnEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.ColumnEntity", "Column")
                        .WithMany("ResultColumns")
                        .HasForeignKey("ColumnId")
                        .IsRequired()
                        .HasConstraintName("FK_ResultColumn_Column");

                    b.HasOne("Valghalla.Database.Entities.Analyze.QueryEntity", "Query")
                        .WithMany("ResultColumns")
                        .HasForeignKey("QueryId")
                        .IsRequired()
                        .HasConstraintName("FK__ResultCol__Query__41EDCAC5");

                    b.Navigation("Column");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.SortColumnEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Analyze.ColumnEntity", "Column")
                        .WithMany("SortColumns")
                        .HasForeignKey("ColumnId")
                        .IsRequired()
                        .HasConstraintName("FK_SortColumn_Column");

                    b.HasOne("Valghalla.Database.Entities.Analyze.QueryEntity", "Query")
                        .WithMany("SortColumns")
                        .HasForeignKey("QueryId")
                        .IsRequired()
                        .HasConstraintName("FK__SortColum__Query__43D61337");

                    b.Navigation("Column");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.AreaEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.AuditLogEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionEntity", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("Election");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.CommunicationLogEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ParticipantEntity", "Participant")
                        .WithMany("CommunicationLogs")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.CommunicationTemplateFileEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "CommunicationTemplate")
                        .WithMany("CommunicationTemplateFiles")
                        .HasForeignKey("CommunicationTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.FileReferenceEntity", "FileReference")
                        .WithMany("CommunicationTemplateFiles")
                        .HasForeignKey("FileReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CommunicationTemplate");

                    b.Navigation("CreatedByUser");

                    b.Navigation("FileReference");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionCommitteeContactInformationEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.FileReferenceEntity", "LogoFileReference")
                        .WithMany("ElectionCommitteeContactInformation")
                        .HasForeignKey("LogoFileReferenceId");

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LogoFileReference");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "ConfirmationOfCancellationCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("ConfirmationOfCancellationCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "ConfirmationOfRegistrationCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("ConfirmationOfRegistrationCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionTypeEntity", "ElectionType")
                        .WithMany("Elections")
                        .HasForeignKey("ElectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "InvitationCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("InvitationCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "InvitationReminderCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("InvitationReminderCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "RetractedInvitationCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("RetractedInvitationCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "TaskReminderCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("TaskReminderCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChangedByUser");

                    b.Navigation("ConfirmationOfCancellationCommunicationTemplate");

                    b.Navigation("ConfirmationOfRegistrationCommunicationTemplate");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ElectionType");

                    b.Navigation("InvitationCommunicationTemplate");

                    b.Navigation("InvitationReminderCommunicationTemplate");

                    b.Navigation("RetractedInvitationCommunicationTemplate");

                    b.Navigation("TaskReminderCommunicationTemplate");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionTaskTypeCommunicationTemplateEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "ConfirmationOfCancellationCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("ConfirmationOfCancellationCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "ConfirmationOfRegistrationCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("ConfirmationOfRegistrationCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ElectionTaskTypeCommunicationTemplates_CommunicationTempla~1");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionEntity", "Election")
                        .WithMany("ElectionTaskTypeCommunicationTemplates")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "InvitationCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("InvitationCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ElectionTaskTypeCommunicationTemplates_CommunicationTempla~2");

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "InvitationReminderCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("InvitationReminderCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ElectionTaskTypeCommunicationTemplates_CommunicationTempla~3");

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "RetractedInvitationCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("RetractedInvitationCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ElectionTaskTypeCommunicationTemplates_CommunicationTempla~4");

                    b.HasOne("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", "TaskReminderCommunicationTemplate")
                        .WithMany()
                        .HasForeignKey("TaskReminderCommunicationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ElectionTaskTypeCommunicationTemplates_CommunicationTempla~5");

                    b.HasOne("Valghalla.Database.Entities.Tables.TaskTypeEntity", "TaskType")
                        .WithMany("ElectionTaskTypeCommunicationTemplates")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("ConfirmationOfCancellationCommunicationTemplate");

                    b.Navigation("ConfirmationOfRegistrationCommunicationTemplate");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Election");

                    b.Navigation("InvitationCommunicationTemplate");

                    b.Navigation("InvitationReminderCommunicationTemplate");

                    b.Navigation("RetractedInvitationCommunicationTemplate");

                    b.Navigation("TaskReminderCommunicationTemplate");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionTypeEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionTypeValidationRuleEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionTypeEntity", "ElectionType")
                        .WithMany("ValidationRules")
                        .HasForeignKey("ElectionTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionValidationRuleEntity", "ValidationRule")
                        .WithMany("ValidationRules")
                        .HasForeignKey("ValidationRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectionType");

                    b.Navigation("ValidationRule");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionWorkLocationEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionEntity", "Election")
                        .WithMany("ElectionWorkLocations")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.WorkLocationEntity", "WorkLocation")
                        .WithMany("ElectionWorkLocations")
                        .HasForeignKey("WorkLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Election");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.FileReferenceEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ParticipantEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "User")
                        .WithOne("Participant")
                        .HasForeignKey("Valghalla.Database.Entities.Tables.ParticipantEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ParticipantEventLogEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ParticipantEntity", "Participant")
                        .WithMany("ParticipantEventLogs")
                        .HasForeignKey("ParticipantId")
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.RejectedTaskAssignmentEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionEntity", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ParticipantEntity", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.TaskTypeEntity", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.WorkLocationEntity", "WorkLocation")
                        .WithMany()
                        .HasForeignKey("WorkLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Election");

                    b.Navigation("Participant");

                    b.Navigation("TaskType");

                    b.Navigation("Team");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.SpecialDietEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.SpecialDietParticipantEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ParticipantEntity", "Participant")
                        .WithMany("SpecialDietParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.SpecialDietEntity", "SpecialDiet")
                        .WithMany("SpecialDietParticipants")
                        .HasForeignKey("SpecialDietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Participant");

                    b.Navigation("SpecialDiet");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskAssignmentEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionEntity", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ParticipantEntity", "Participant")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Valghalla.Database.Entities.Tables.TaskTypeEntity", "TaskType")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.WorkLocationEntity", "WorkLocation")
                        .WithMany()
                        .HasForeignKey("WorkLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.WorkLocationTaskTypeEntity", "WorkLocationTaskType")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("WorkLocationId", "TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.WorkLocationTeamEntity", "WorkLocationTeam")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("WorkLocationId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Election");

                    b.Navigation("Participant");

                    b.Navigation("TaskType");

                    b.Navigation("Team");

                    b.Navigation("WorkLocation");

                    b.Navigation("WorkLocationTaskType");

                    b.Navigation("WorkLocationTeam");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskLinkEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionEntity", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskTypeEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskTypeFileEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.FileReferenceEntity", "FileReference")
                        .WithMany("TaskTypeFiles")
                        .HasForeignKey("FileReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.TaskTypeEntity", "TaskType")
                        .WithMany("TaskTypeFiles")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("FileReference");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TasksFilteredLinkEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.ElectionEntity", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TeamEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TeamMemberEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ParticipantEntity", "Participant")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.TeamEntity", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Participant");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TeamResponsibleEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ParticipantEntity", "Participant")
                        .WithMany("TeamResponsibles")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.TeamEntity", "Team")
                        .WithMany("TeamResponsibles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Participant");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WebPageEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.AreaEntity", "Area")
                        .WithMany("WorkLocations")
                        .HasForeignKey("AreaId")
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationResponsibleEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy");

                    b.HasOne("Valghalla.Database.Entities.Tables.UserEntity", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.ParticipantEntity", "Participant")
                        .WithMany("WorkLocationResponsibles")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.WorkLocationEntity", "WorkLocation")
                        .WithMany("WorkLocationResponsibles")
                        .HasForeignKey("WorkLocationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Participant");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationTaskTypeEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.TaskTypeEntity", "TaskType")
                        .WithMany("WorkLocationTaskTypes")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.WorkLocationEntity", "WorkLocation")
                        .WithMany("WorkLocationTaskTypes")
                        .HasForeignKey("WorkLocationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("TaskType");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationTeamEntity", b =>
                {
                    b.HasOne("Valghalla.Database.Entities.Tables.TeamEntity", "Team")
                        .WithMany("WorkLocationTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Valghalla.Database.Entities.Tables.WorkLocationEntity", "WorkLocation")
                        .WithMany("WorkLocationTeams")
                        .HasForeignKey("WorkLocationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ColumnEntity", b =>
                {
                    b.Navigation("ColumnOperators");

                    b.Navigation("FilterColumns");

                    b.Navigation("ListTypeColumns");

                    b.Navigation("ResultColumns");

                    b.Navigation("SortColumns");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ColumnOperatorEntity", b =>
                {
                    b.Navigation("FilterColumns");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.DatatypeEntity", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.FilterColumnEntity", b =>
                {
                    b.Navigation("FilterColumnValues");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.FilterEntity", b =>
                {
                    b.Navigation("FilterColumns");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ListPickerTypeEntity", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.ListTypeEntity", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("ListTypeColumns");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.OperatorEntity", b =>
                {
                    b.Navigation("ColumnOperators");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Analyze.QueryEntity", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("ResultColumns");

                    b.Navigation("SortColumns");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.AreaEntity", b =>
                {
                    b.Navigation("WorkLocations");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.CommunicationTemplateEntity", b =>
                {
                    b.Navigation("CommunicationTemplateFiles");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionEntity", b =>
                {
                    b.Navigation("ElectionTaskTypeCommunicationTemplates");

                    b.Navigation("ElectionWorkLocations");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionTypeEntity", b =>
                {
                    b.Navigation("Elections");

                    b.Navigation("ValidationRules");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ElectionValidationRuleEntity", b =>
                {
                    b.Navigation("ValidationRules");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.FileReferenceEntity", b =>
                {
                    b.Navigation("CommunicationTemplateFiles");

                    b.Navigation("ElectionCommitteeContactInformation");

                    b.Navigation("TaskTypeFiles");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.ParticipantEntity", b =>
                {
                    b.Navigation("CommunicationLogs");

                    b.Navigation("ParticipantEventLogs");

                    b.Navigation("SpecialDietParticipants");

                    b.Navigation("TaskAssignments");

                    b.Navigation("TeamMembers");

                    b.Navigation("TeamResponsibles");

                    b.Navigation("WorkLocationResponsibles");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.SpecialDietEntity", b =>
                {
                    b.Navigation("SpecialDietParticipants");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TaskTypeEntity", b =>
                {
                    b.Navigation("ElectionTaskTypeCommunicationTemplates");

                    b.Navigation("TaskAssignments");

                    b.Navigation("TaskTypeFiles");

                    b.Navigation("WorkLocationTaskTypes");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.TeamEntity", b =>
                {
                    b.Navigation("TeamMembers");

                    b.Navigation("TeamResponsibles");

                    b.Navigation("WorkLocationTeams");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.UserEntity", b =>
                {
                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationEntity", b =>
                {
                    b.Navigation("ElectionWorkLocations");

                    b.Navigation("WorkLocationResponsibles");

                    b.Navigation("WorkLocationTaskTypes");

                    b.Navigation("WorkLocationTeams");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationTaskTypeEntity", b =>
                {
                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("Valghalla.Database.Entities.Tables.WorkLocationTeamEntity", b =>
                {
                    b.Navigation("TaskAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
